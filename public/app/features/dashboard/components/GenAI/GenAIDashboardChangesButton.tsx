import React, { useMemo } from 'react';

import { DashboardModel } from '../../state';

import { GenAIButton } from './GenAIButton';
import { EventTrackingSrc } from './tracking';
import { getDashboardChanges, Message, Role } from './utils';

interface GenAIDashboardChangesButtonProps {
  dashboard: DashboardModel;
  onGenerate: (title: string) => void;
  disabled?: boolean;
}

const CHANGES_GENERATION_STANDARD_PROMPT = [
  'You are an expert in Grafana Dashboards',
  'Your goal is to write a description of the changes for a dashboard to display to the user',
  'You will be given human-readable diffs with irrelevant lines filtered out',
  'When referring to panel changes, use the panel title',
  'When using panel title, wrap it with double quotes',
  'When the panel changes the position, just mention the panel has changed position',
  'When an entire panel is added or removed, use the panel title and only say it was added or removed and disregard the rest of the changes for that panel',
  'Group changes when all panels are affected',
  'Do not mention line number',
  'Refer to templating elements as variables',
  'Ignore and never mention changes about plugin version',
  'Threshold step changes of value being removed and replaced with color "green" should always be ignored',
  'Try to make the response as short as possible',
].join('.\n');

export const GenAIDashboardChangesButton = ({ dashboard, onGenerate, disabled }: GenAIDashboardChangesButtonProps) => {
  const messages = useMemo(() => getMessages(dashboard), [dashboard]);

  return (
    <GenAIButton
      messages={messages}
      onGenerate={onGenerate}
      loadingText={'Generating changes summary'}
      temperature={0}
      eventTrackingSrc={EventTrackingSrc.dashboardChanges}
      toggleTipTitle={'Improve your dashboard changes summary'}
      disabled={disabled}
    />
  );
};

function getMessages(dashboard: DashboardModel): Message[] {
  let { userChanges, migrationChanges } = getDashboardChanges(dashboard);
  if (userChanges.length > 4000) {
    userChanges =
      "User changes were too long, fill in the user changes section with 'User changes too long to auto-summarize'";
  }
  if (migrationChanges.length > 4000) {
    migrationChanges =
      "Migration changes were too long, fill in the migration changes section with 'User changes too long to auto-summarize'";
  }
  return [
    {
      content: CHANGES_GENERATION_STANDARD_PROMPT,
      role: Role.system,
    },
    {
      content: `Summarize the following user changes diff under "User Changes":\n${userChanges}`,
      role: Role.system,
    },
    {
      content:
        `Be sure to only include substantial user changes, such as adding or removing entire panels, changing panel titles or descriptions, etc.\n` +
        `Ignore other changes and do not include them in the summary. Do not include "User Changes" section if there are no substantial user changes to report.`,
      role: Role.system,
    },
    {
      content: `Summarize the following migration changes diff under "Migration Changes":\n${migrationChanges}`,
      role: Role.system,
    },
    {
      content:
        `Ignore the entire migration diff if it is less than 10 lines long.\n` +
        `Be sure to only include substantial migration changes, such as adding or removing entire panels, changing panel titles or descriptions, etc.\n` +
        `Ignore any threshold step changes or templating list changes.\n` +
        `Ignore other changes and do not include them in the summary. Do not include "Migration Changes" section if there are no substantial migration changes to report.\n` +
        `If there are substantial migration changes, add "Some autogenerated changes are included to update the dashboard to the latest valid schema version" at the end.`,
      role: Role.system,
    },
    {
      content:
        `Respond only with the diff description, which is meant to be loaded directly into the application for the user.\n` +
        `If there are no substantial user or migration changes, the correct description is "Minor changes only"`,
      role: Role.system,
    },
  ];
}
